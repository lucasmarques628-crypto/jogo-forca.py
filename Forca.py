import random  # Importa o m√≥dulo random para gerar escolhas aleat√≥rias

# ASCII art da forca, cada elemento √© um est√°gio do boneco na forca
HANGMAN_STAGES = ['''
  +---+
  |   |
      |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========''']

# Lista de palavras poss√≠veis para o jogo
WORDS = ['python','programador','computador','barbearia','chave','janela','carro','teclado','monitor','internet','algoritmo','variavel']

# Fun√ß√£o para escolher palavra aleat√≥ria
def escolher_palavra(palavras):
    """
    random.choice(lista) escolhe um elemento aleat√≥rio da lista
    .lower() transforma a palavra em min√∫sculas
    """
    return random.choice(palavras).lower()

# Fun√ß√£o principal do jogo
def jogar():
    palavra = escolher_palavra(WORDS)  # Palavra secreta
    letras_descobertas = ['_' for _ in palavra]  # Cria lista de underscores do tamanho da palavra
    erros = 0  # Contador de erros
    letras_usadas = set()  # Conjunto para checar letras j√° usadas
    letras_erradas = []  # Lista para guardar letras erradas separadamente
    max_erros = len(HANGMAN_STAGES) - 1  # N√∫mero m√°ximo de erros antes de perder

    # Loop do jogo, enquanto n√£o houver vit√≥ria ou derrota
    while True:
        print(HANGMAN_STAGES[erros])  # Mostra a forca correspondente ao n√∫mero de erros
        print('\nPalavra: ' + ' '.join(letras_descobertas))  # Mostra a palavra com letras descobertas e underscores
        print('Letras erradas: ' + ', '.join(letras_erradas))  # Mostra as letras erradas separadas
        # Barra de progresso da palavra: mostra quantas letras j√° foram descobertas
        progresso = int(((len([l for l in letras_descobertas if l != '_']) / len(palavra)) * 20))
        print('Progresso: [' + '#' * progresso + '-' * (20 - progresso) + ']')  # # = letras descobertas, - = restantes

        # Pede uma letra ao usu√°rio
        chute = input('\nDigite uma letra: ').strip().lower()  # .strip() remove espa√ßos, .lower() min√∫scula

        # Valida√ß√£o: garante que o chute seja apenas uma letra
        if not chute or len(chute) != 1 or not chute.isalpha():
            print('Por favor, digite apenas UMA letra (a-z).')
            continue  # Volta para o come√ßo do while

        # Checa se letra j√° foi usada
        if chute in letras_usadas:
            print('Voc√™ j√° tentou essa letra. Tente outra.')
            continue  # Volta para o come√ßo do while

        letras_usadas.add(chute)  # Adiciona ao conjunto de letras usadas

        # Se letra correta
        if chute in palavra:
            for i, c in enumerate(palavra):  # Percorre cada letra da palavra
                if c == chute:
                    letras_descobertas[i] = chute  # Revela a letra na posi√ß√£o correta
            print(f'Boa! A letra "{chute}" est√° na palavra!')
        else:  # Se letra incorreta
            erros += 1  # Incrementa o n√∫mero de erros
            letras_erradas.append(chute)  # Adiciona a letra √† lista de letras erradas
            print(f'Errou! A letra "{chute}" n√£o est√° na palavra. Restam {max_erros - erros} tentativas.')

        # Checa vit√≥ria
        if '_' not in letras_descobertas:
            print('\nParab√©ns ‚Äî voc√™ ganhou! üéâ')
            print('A palavra era:', palavra)
            break  # Sai do loop

        # Checa derrota
        if erros >= max_erros:
            print(HANGMAN_STAGES[erros])  # Mostra a forca completa
            print('\nVoc√™ perdeu. üò¢')
            print('A palavra era:', palavra)
            break  # Sai do loop

# Loop externo para permitir jogar novamente
while True:
    jogar()  # Chama a fun√ß√£o jogar

    # Pergunta ao usu√°rio se deseja jogar novamente
    print("\nDeseja jogar novamente?")
    print("1 - Sim")
    print("2 - N√£o")
    resposta = input("Digite 1 ou 2: ").strip()  # Remove espa√ßos extras

    # Estrutura de decis√£o:
    # if: condi√ß√£o verdadeira executa este bloco
    if resposta == "1":
        continue  # Reinicia o loop, o jogo recome√ßa
    # elif: "else if", executa se o if anterior n√£o for verdadeiro
    elif resposta == "2":
        print("Obrigado por jogar! At√© a pr√≥xima! üëã")
        break  # Sai do loop, encerra o programa
    # else: executa se nenhuma das condi√ß√µes anteriores for verdadeira
    else:
        print("Resposta inv√°lida. Saindo do jogo.")
        break  # Encerra o programa


